---
import '@/global.css'

import config from '@/config'

import BaseHead from '@/components/BaseHead.astro'
import Nav from '@/components/Nav.astro'
import Footer from '@/components/Footer.astro'

import '@fontsource/inter/600.css'
import '@fontsource/inter/400.css'

const {
  meta: { title, description = config.description },
} = Astro.props
---

<html lang={config.lang}>
  <head>
    <!-- CRITICAL: This must be the very first script to prevent theme flash -->
    <script is:inline define:vars={{ config }}>
      (function() {
        try {
          const theme = localStorage.getItem('theme')
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
          const shouldBeDark = theme === 'dark' || (!theme && prefersDark)
          
          // Apply to html element for your CSS custom variant
          if (shouldBeDark) {
            document.documentElement.classList.add('dark')
            document.documentElement.setAttribute('data-theme', config.themes.dark)
          } else {
            document.documentElement.classList.remove('dark')
            document.documentElement.setAttribute('data-theme', config.themes.light)
          }
          
          // Also set a data attribute to prevent any flash
          document.documentElement.setAttribute('data-theme-ready', 'true')
        } catch (e) {
          // Fallback if localStorage is not available
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark')
            document.documentElement.setAttribute('data-theme', config.themes.dark)
          } else {
            document.documentElement.setAttribute('data-theme', config.themes.light)
          }
          document.documentElement.setAttribute('data-theme-ready', 'true')
        }
      })()
    </script>
    
    <BaseHead title={title} description={description} />
  </head>
  <body
    class="bg-background font-base text-foreground scrollbar scrollbar-thumb-black dark:scrollbar-thumb-white mx-auto max-w-[900px] px-5"
  >
    <Nav />
    <main
      class="w500:min-h-[calc(100dvh-70px)] w400:pt-[140px] min-h-[calc(100dvh-70px)] py-10 pt-[120px]"
    >
      <slot />
    </main>
    <Footer />

    <script>
      import config from '@/config'

      function applyTheme() {
        try {
          const theme = localStorage.getItem('theme')
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
          
          if (theme === 'dark' || (!theme && prefersDark)) {
            document.documentElement.classList.add('dark')
            document.documentElement.setAttribute('data-theme', config.themes.dark as string)
          } else {
            document.documentElement.classList.remove('dark')
            document.documentElement.setAttribute('data-theme', config.themes.light as string)
          }
        } catch (e) {
          // Fallback
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark')
            document.documentElement.setAttribute('data-theme', config.themes.dark as string)
          }
        }
      }

      // Apply theme after navigation
      document.addEventListener('astro:after-swap', applyTheme)

      // View transitions
      if (document.startViewTransition) {
        document.querySelectorAll('a[href]').forEach((link) => {
          const anchor = link as HTMLAnchorElement
          const url = anchor.href

          anchor.addEventListener('click', (e) => {
            if (
              url &&
              url !== window.location.href &&
              anchor.origin === window.location.origin
            ) {
              e.preventDefault()
              document.startViewTransition(() => {
                window.location.href = url
              })
            }
          })
        })
      }
    </script>
  </body>
</html>